#nullable enable
using System;
using System.IO;
using System.Linq;

namespace ADCS.CertMod.Managed;

/// <summary>
/// Represents a file-based implementation of <see cref="ILogWriter"/>. By default, logs generated by this class are
/// written to a file system at the following location: <code>%windir%\AdcsCertMod.{moduleShortName}.log</code>.
/// Log file location can be overriden.
/// </summary>
public class LogWriter : ILogWriter {
    readonly String _logPath;
    readonly Object _lock = new();

    /// <summary>
    /// Initializes a new instance 
    /// </summary>
    /// <param name="moduleShortName">A short name of the policy or exit module. This name is used as part of log file name.</param>
    /// <param name="logLevel">An active logging level.</param>
    /// <param name="baseDir">Optional path to a folder to write log stream. If not specified, logs are written into <c>%windir%</c> folder.</param>
    public LogWriter(String moduleShortName, LogLevel logLevel, String? baseDir = null) {
        _logPath = baseDir is null
            ? $"{Environment.GetEnvironmentVariable("windir")}\\AdcsCertMod.{moduleShortName}.log"
            : $"{baseDir}\\AdcsCertMod.{moduleShortName}.log";
        LogLevel = logLevel;
    }

    /// <inheritdoc />
    public LogLevel LogLevel { get; set; }

    /// <inheritdoc />
    public void LogTrace(String message, params Object[]? args) {
        Log(LogLevel.Trace, message, args);
    }
    /// <inheritdoc />
    public void LogTrace(Exception exception, String source) {
        Log(LogLevel.Trace, exception, source);
    }
    /// <inheritdoc />
    public void LogDebug(String message, params Object[]? args) {
        Log(LogLevel.Debug, message, args);
    }
    /// <inheritdoc />
    public void LogDebug(Exception exception, String source) {
        Log(LogLevel.Debug, exception, source);
    }
    /// <inheritdoc />
    public void LogInformation(String message, params Object[]? args) {
        Log(LogLevel.Information, message, args);
    }
    /// <inheritdoc />
    public void LogInformation(Exception exception, String source) {
        Log(LogLevel.Information, exception, source);
    }
    /// <inheritdoc />
    public void LogWarning(String message, params Object[]? args) {
        Log(LogLevel.Warning, message, args);
    }
    /// <inheritdoc />
    public void LogWarning(Exception exception, String source) {
        Log(LogLevel.Warning, exception, source);
    }
    /// <inheritdoc />
    public void LogError(String message, params Object[]? args) {
        Log(LogLevel.Error, message, args);
    }
    /// <inheritdoc />
    public void LogError(Exception exception, String source) {
        Log(LogLevel.Error, exception, source);
    }
    /// <inheritdoc />
    public void LogCritical(String message, params Object[]? args) {
        Log(LogLevel.Critical, message, args);
    }
    /// <inheritdoc />
    public void LogCritical(Exception exception, String source) {
        Log(LogLevel.Critical, exception, source);
    }

    /// <inheritdoc />
    public void Log(LogLevel logLevel, String message, params Object[]? args) {
        if (LogLevel == LogLevel.None || logLevel < LogLevel) {
            return;
        }
        lock (_lock) {
            try {
                String value = message;
                if (args != null && args.Any()) {
                    value = String.Format(message, args);
                }

                using StreamWriter sw = File.AppendText(_logPath);
                sw.WriteLine($"[{DateTime.Now}] {value}");
            } catch { }
        }
    }
    /// <inheritdoc />
    public void Log(LogLevel logLevel, Exception exception, String source) {
        if (LogLevel == LogLevel.None || logLevel < LogLevel) {
            return;
        }

        lock (_lock) {
            try {
                using StreamWriter sw = File.AppendText(_logPath);
                sw.WriteLine($"[{DateTime.Now}] An exception at source '{source}' occurred.");
                Exception e = exception;
                do {
                    sw.WriteLine("Exception type: " + e.GetType().FullName);
                    sw.WriteLine($"Error message: {e.Message}");
                } while ((e = e.InnerException) != null);
                sw.WriteLine("Stack Trace:");
                sw.WriteLine($"{exception.StackTrace?.TrimEnd()}");
            } catch { }
        }
    }
}